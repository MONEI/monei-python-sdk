# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentPaymentMethodCard(BaseModel):
    """
    Details about the card used as payment method at the time of the transaction. 
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).")
    brand: Optional[StrictStr] = Field(default=None, description="Card brand.")
    type: Optional[StrictStr] = Field(default=None, description="Card type `debit` or `credit`.")
    three_d_secure: Optional[StrictBool] = Field(default=None, description="Whether this transaction used 3D Secure authentication.", alias="threeDSecure")
    three_d_secure_version: Optional[StrictStr] = Field(default=None, description="The protocol version of the 3DS challenge.", alias="threeDSecureVersion")
    three_d_secure_flow: Optional[StrictStr] = Field(default=None, description="The flow used for 3DS authentication. - `CHALLENGE` - In a challenge flow, the issuer requires additional shopper interaction, either through biometrics, two-factor authentication, or similar methods based on [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) factors. - `FRICTIONLESS` - In a frictionless flow, the acquirer, issuer, and card scheme exchange all necessary     information in the background through passive authentication using the shopper's device     fingerprint. The transaction is completed without further shopper interaction. - `FRICTIONLESS_CHALLENGE` - This flow is the complete 3DS flow. It is similar to the 3DS frictionless flow but     includes an additional authentication step (challenge) that will be invoked if the     information provided in the data collection step does not suffice to determine the     risk-level of the transaction. - `DIRECT` - This transaction did not require [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) due to the low risk ", alias="threeDSecureFlow")
    expiration: Optional[StrictInt] = Field(default=None, description="Time at which the card will expire. Measured in seconds since the Unix epoch. ")
    last4: Optional[StrictStr] = Field(default=None, description="The last four digits of the card.")
    tokenization_method: Optional[StrictStr] = Field(default=None, description="The digital wallet used to tokenize the card.", alias="tokenizationMethod")
    cardholder_name: Optional[StrictStr] = Field(default=None, description="The name of the cardholder.", alias="cardholderName")
    cardholder_email: Optional[StrictStr] = Field(default=None, description="The email of the cardholder.", alias="cardholderEmail")
    __properties: ClassVar[List[str]] = ["country", "brand", "type", "threeDSecure", "threeDSecureVersion", "threeDSecureFlow", "expiration", "last4", "tokenizationMethod", "cardholderName", "cardholderEmail"]

    @field_validator('brand')
    def brand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['visa', 'mastercard', 'diners', 'amex', 'jcb', 'unionpay', 'unknown']):
            raise ValueError("must be one of enum values ('visa', 'mastercard', 'diners', 'amex', 'jcb', 'unionpay', 'unknown')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['debit', 'credit']):
            raise ValueError("must be one of enum values ('debit', 'credit')")
        return value

    @field_validator('three_d_secure_flow')
    def three_d_secure_flow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHALLENGE', 'FRICTIONLESS', 'FRICTIONLESS_CHALLENGE', 'DIRECT']):
            raise ValueError("must be one of enum values ('CHALLENGE', 'FRICTIONLESS', 'FRICTIONLESS_CHALLENGE', 'DIRECT')")
        return value

    @field_validator('tokenization_method')
    def tokenization_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['applePay', 'googlePay', 'clickToPay']):
            raise ValueError("must be one of enum values ('applePay', 'googlePay', 'clickToPay')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPaymentMethodCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPaymentMethodCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "brand": obj.get("brand"),
            "type": obj.get("type"),
            "threeDSecure": obj.get("threeDSecure"),
            "threeDSecureVersion": obj.get("threeDSecureVersion"),
            "threeDSecureFlow": obj.get("threeDSecureFlow"),
            "expiration": obj.get("expiration"),
            "last4": obj.get("last4"),
            "tokenizationMethod": obj.get("tokenizationMethod"),
            "cardholderName": obj.get("cardholderName"),
            "cardholderEmail": obj.get("cardholderEmail")
        })
        return _obj


