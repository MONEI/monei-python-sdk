# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <p><a href=\"https://docs.monei.com/api/errors\">View complete list of status codes â†’</a></p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p>   # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Monei.configuration import Configuration


class PaymentMethodsMetadataClickToPay(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_support': 'bool',
        'preselected': 'bool',
        'visa': 'PaymentMethodsMetadataClickToPayVisa',
        'mastercard': 'PaymentMethodsMetadataClickToPayMastercard',
        'discover': 'PaymentMethodsMetadataClickToPayDiscover'
    }

    attribute_map = {
        'token_support': 'tokenSupport',
        'preselected': 'preselected',
        'visa': 'visa',
        'mastercard': 'mastercard',
        'discover': 'discover'
    }

    def __init__(self, token_support=None, preselected=None, visa=None, mastercard=None, discover=None, local_vars_configuration=None):  # noqa: E501
        """PaymentMethodsMetadataClickToPay - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._token_support = None
        self._preselected = None
        self._visa = None
        self._mastercard = None
        self._discover = None
        self.discriminator = None

        if token_support is not None:
            self.token_support = token_support
        if preselected is not None:
            self.preselected = preselected
        if visa is not None:
            self.visa = visa
        if mastercard is not None:
            self.mastercard = mastercard
        if discover is not None:
            self.discover = discover

    @property
    def token_support(self):
        """Gets the token_support of this PaymentMethodsMetadataClickToPay.  # noqa: E501

        Whether token support is enabled  # noqa: E501

        :return: The token_support of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :rtype: bool
        """
        return self._token_support

    @token_support.setter
    def token_support(self, token_support):
        """Sets the token_support of this PaymentMethodsMetadataClickToPay.

        Whether token support is enabled  # noqa: E501

        :param token_support: The token_support of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :type: bool
        """

        self._token_support = token_support

    @property
    def preselected(self):
        """Gets the preselected of this PaymentMethodsMetadataClickToPay.  # noqa: E501

        Whether the method is preselected  # noqa: E501

        :return: The preselected of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :rtype: bool
        """
        return self._preselected

    @preselected.setter
    def preselected(self, preselected):
        """Sets the preselected of this PaymentMethodsMetadataClickToPay.

        Whether the method is preselected  # noqa: E501

        :param preselected: The preselected of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :type: bool
        """

        self._preselected = preselected

    @property
    def visa(self):
        """Gets the visa of this PaymentMethodsMetadataClickToPay.  # noqa: E501


        :return: The visa of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :rtype: PaymentMethodsMetadataClickToPayVisa
        """
        return self._visa

    @visa.setter
    def visa(self, visa):
        """Sets the visa of this PaymentMethodsMetadataClickToPay.


        :param visa: The visa of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :type: PaymentMethodsMetadataClickToPayVisa
        """

        self._visa = visa

    @property
    def mastercard(self):
        """Gets the mastercard of this PaymentMethodsMetadataClickToPay.  # noqa: E501


        :return: The mastercard of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :rtype: PaymentMethodsMetadataClickToPayMastercard
        """
        return self._mastercard

    @mastercard.setter
    def mastercard(self, mastercard):
        """Sets the mastercard of this PaymentMethodsMetadataClickToPay.


        :param mastercard: The mastercard of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :type: PaymentMethodsMetadataClickToPayMastercard
        """

        self._mastercard = mastercard

    @property
    def discover(self):
        """Gets the discover of this PaymentMethodsMetadataClickToPay.  # noqa: E501


        :return: The discover of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :rtype: PaymentMethodsMetadataClickToPayDiscover
        """
        return self._discover

    @discover.setter
    def discover(self, discover):
        """Sets the discover of this PaymentMethodsMetadataClickToPay.


        :param discover: The discover of this PaymentMethodsMetadataClickToPay.  # noqa: E501
        :type: PaymentMethodsMetadataClickToPayDiscover
        """

        self._discover = discover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodsMetadataClickToPay):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentMethodsMetadataClickToPay):
            return True

        return self.to_dict() != other.to_dict()
