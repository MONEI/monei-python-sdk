# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from Monei.models.payment_billing_details import PaymentBillingDetails
from Monei.models.payment_customer import PaymentCustomer
from Monei.models.payment_payment_method_input import PaymentPaymentMethodInput
from Monei.models.payment_sequence import PaymentSequence
from Monei.models.payment_session_details import PaymentSessionDetails
from Monei.models.payment_shipping_details import PaymentShippingDetails
from Monei.models.payment_transaction_type import PaymentTransactionType
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentRequest(BaseModel):
    """
    CreatePaymentRequest
    """ # noqa: E501
    amount: StrictInt = Field(description="Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD). ")
    currency: StrictStr = Field(description="Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency. ")
    order_id: StrictStr = Field(description="An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system. ", alias="orderId")
    callback_url: Optional[StrictStr] = Field(default=None, description="The URL to which a payment result should be sent asynchronously. ", alias="callbackUrl")
    complete_url: Optional[StrictStr] = Field(default=None, description="The URL the customer will be directed to after transaction completed (successful or failed - except if `failUrl` is provided). ", alias="completeUrl")
    fail_url: Optional[StrictStr] = Field(default=None, description="The URL the customer will be directed to after transaction has failed, instead of `completeUrl` (used in hosted payment page). This allows to provide two different URLs for successful and failed payments. ", alias="failUrl")
    cancel_url: Optional[StrictStr] = Field(default=None, description="The URL the customer will be directed to if they decide to cancel payment and return to your website (used in hosted payment page). ", alias="cancelUrl")
    payment_token: Optional[StrictStr] = Field(default=None, description="A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method). In case of the first one, you will also need to send the `sessionId` used to generate the token in the first place. ", alias="paymentToken")
    session_id: Optional[StrictStr] = Field(default=None, description="A unique identifier within your system that adds security to the payment process. You need to pass the same session ID as the one used on the frontend to initialize MONEI Component (if you needed to). This is required if a payment token (not permanent) was already generated in the frontend. ", alias="sessionId")
    generate_payment_token: Optional[StrictBool] = Field(default=False, description="If set to true a permanent token that represents a payment method used in the payment will be generated. ", alias="generatePaymentToken")
    payment_method: Optional[PaymentPaymentMethodInput] = Field(default=None, alias="paymentMethod")
    allowed_payment_methods: Optional[PaymentPaymentMethods] = Field(default=None, alias="allowedPaymentMethods")
    transaction_type: Optional[PaymentTransactionType] = Field(default=PaymentTransactionType.SALE, alias="transactionType")
    sequence: Optional[PaymentSequence] = None
    store_id: Optional[StrictStr] = Field(default=None, description="A unique identifier of the Store. If specified the payment is attached to this Store. ", alias="storeId")
    point_of_sale_id: Optional[StrictStr] = Field(default=None, description="A unique identifier of the Point of Sale. If specified the payment is attached to this Point of Sale. If there is a QR code attached to the same Point of Sale, this payment will be available by scanning the QR code. ", alias="pointOfSaleId")
    subscription_id: Optional[StrictStr] = Field(default=None, description="A unique identifier of the Subscription. If specified the payment is attached to this Subscription. ", alias="subscriptionId")
    auto_recover: Optional[StrictBool] = Field(default=None, description="If set to `true`, the new payment will be automatically created when customer visits the payment link of the previously failed payment. Is automatically set to `true` if `completeUrl` is not provided.(set this value to `true` to create \"Pay By Link\" payments).", alias="autoRecover")
    description: Optional[StrictStr] = Field(default=None, description="An arbitrary string attached to the payment. Often useful for displaying to users. ")
    customer: Optional[PaymentCustomer] = None
    billing_details: Optional[PaymentBillingDetails] = Field(default=None, alias="billingDetails")
    shipping_details: Optional[PaymentShippingDetails] = Field(default=None, alias="shippingDetails")
    session_details: Optional[PaymentSessionDetails] = Field(default=None, alias="sessionDetails")
    expire_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Payment expiration time.", alias="expireAt")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.")
    __properties: ClassVar[List[str]] = ["amount", "currency", "orderId", "callbackUrl", "completeUrl", "failUrl", "cancelUrl", "paymentToken", "sessionId", "generatePaymentToken", "paymentMethod", "allowedPaymentMethods", "transactionType", "sequence", "storeId", "pointOfSaleId", "subscriptionId", "autoRecover", "description", "customer", "billingDetails", "shippingDetails", "sessionDetails", "expireAt", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sequence
        if self.sequence:
            _dict['sequence'] = self.sequence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_details
        if self.billing_details:
            _dict['billingDetails'] = self.billing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_details
        if self.shipping_details:
            _dict['shippingDetails'] = self.shipping_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_details
        if self.session_details:
            _dict['sessionDetails'] = self.session_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "orderId": obj.get("orderId"),
            "callbackUrl": obj.get("callbackUrl"),
            "completeUrl": obj.get("completeUrl"),
            "failUrl": obj.get("failUrl"),
            "cancelUrl": obj.get("cancelUrl"),
            "paymentToken": obj.get("paymentToken"),
            "sessionId": obj.get("sessionId"),
            "generatePaymentToken": obj.get("generatePaymentToken") if obj.get("generatePaymentToken") is not None else False,
            "paymentMethod": PaymentPaymentMethodInput.from_dict(obj["paymentMethod"]) if obj.get("paymentMethod") is not None else None,
            "allowedPaymentMethods": obj.get("allowedPaymentMethods"),
            "transactionType": obj.get("transactionType") if obj.get("transactionType") is not None else PaymentTransactionType.SALE,
            "sequence": PaymentSequence.from_dict(obj["sequence"]) if obj.get("sequence") is not None else None,
            "storeId": obj.get("storeId"),
            "pointOfSaleId": obj.get("pointOfSaleId"),
            "subscriptionId": obj.get("subscriptionId"),
            "autoRecover": obj.get("autoRecover"),
            "description": obj.get("description"),
            "customer": PaymentCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "billingDetails": PaymentBillingDetails.from_dict(obj["billingDetails"]) if obj.get("billingDetails") is not None else None,
            "shippingDetails": PaymentShippingDetails.from_dict(obj["shippingDetails"]) if obj.get("shippingDetails") is not None else None,
            "sessionDetails": PaymentSessionDetails.from_dict(obj["sessionDetails"]) if obj.get("sessionDetails") is not None else None,
            "expireAt": obj.get("expireAt"),
            "metadata": obj.get("metadata")
        })
        return _obj


