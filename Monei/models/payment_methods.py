# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <p><a href=\"https://docs.monei.com/api/errors\">View complete list of status codes â†’</a></p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p>   # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Monei.configuration import Configuration


class PaymentMethods(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'livemode': 'bool',
        'payment_methods': 'list[str]',
        'metadata': 'PaymentMethodsMetadata',
        'merchant_name': 'str',
        'merchant_url': 'str',
        'country_code': 'str',
        'account_id': 'str',
        'amount': 'int',
        'currency': 'str'
    }

    attribute_map = {
        'livemode': 'livemode',
        'payment_methods': 'paymentMethods',
        'metadata': 'metadata',
        'merchant_name': 'merchantName',
        'merchant_url': 'merchantUrl',
        'country_code': 'countryCode',
        'account_id': 'accountId',
        'amount': 'amount',
        'currency': 'currency'
    }

    def __init__(self, livemode=None, payment_methods=None, metadata=None, merchant_name=None, merchant_url=None, country_code=None, account_id=None, amount=None, currency=None, local_vars_configuration=None):  # noqa: E501
        """PaymentMethods - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._livemode = None
        self._payment_methods = None
        self._metadata = None
        self._merchant_name = None
        self._merchant_url = None
        self._country_code = None
        self._account_id = None
        self._amount = None
        self._currency = None
        self.discriminator = None

        if livemode is not None:
            self.livemode = livemode
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if metadata is not None:
            self.metadata = metadata
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if merchant_url is not None:
            self.merchant_url = merchant_url
        if country_code is not None:
            self.country_code = country_code
        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency

    @property
    def livemode(self):
        """Gets the livemode of this PaymentMethods.  # noqa: E501

        Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.  # noqa: E501

        :return: The livemode of this PaymentMethods.  # noqa: E501
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this PaymentMethods.

        Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.  # noqa: E501

        :param livemode: The livemode of this PaymentMethods.  # noqa: E501
        :type: bool
        """

        self._livemode = livemode

    @property
    def payment_methods(self):
        """Gets the payment_methods of this PaymentMethods.  # noqa: E501

        An array of available payment methods for the account or payment. Possible values include:   - `alipay` - Alipay   - `applePay` - Apple Pay   - `bancontact` - Bancontact   - `bizum` - Bizum   - `blik` - BLIK   - `card` - Credit or debit card   - `cardPresent` - Card present (physical POS)   - `clickToPay` - Click to Pay   - `cofidis` - Cofidis   - `cofidisLoan` - Cofidis Loan   - `eps` - EPS   - `giropay` - Giropay   - `googlePay` - Google Pay   - `iDeal` - iDEAL   - `klarna` - Klarna   - `mbway` - MB WAY   - `multibanco` - Multibanco   - `paypal` - PayPal   - `sepa` - SEPA Direct Debit   - `sofort` - Sofort   - `trustly` - Trustly   # noqa: E501

        :return: The payment_methods of this PaymentMethods.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this PaymentMethods.

        An array of available payment methods for the account or payment. Possible values include:   - `alipay` - Alipay   - `applePay` - Apple Pay   - `bancontact` - Bancontact   - `bizum` - Bizum   - `blik` - BLIK   - `card` - Credit or debit card   - `cardPresent` - Card present (physical POS)   - `clickToPay` - Click to Pay   - `cofidis` - Cofidis   - `cofidisLoan` - Cofidis Loan   - `eps` - EPS   - `giropay` - Giropay   - `googlePay` - Google Pay   - `iDeal` - iDEAL   - `klarna` - Klarna   - `mbway` - MB WAY   - `multibanco` - Multibanco   - `paypal` - PayPal   - `sepa` - SEPA Direct Debit   - `sofort` - Sofort   - `trustly` - Trustly   # noqa: E501

        :param payment_methods: The payment_methods of this PaymentMethods.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["alipay", "applePay", "bancontact", "bizum", "blik", "card", "cardPresent", "clickToPay", "cofidis", "cofidisLoan", "eps", "giropay", "googlePay", "iDeal", "klarna", "mbway", "multibanco", "paypal", "sepa", "sofort", "trustly"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(payment_methods).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `payment_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(payment_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._payment_methods = payment_methods

    @property
    def metadata(self):
        """Gets the metadata of this PaymentMethods.  # noqa: E501


        :return: The metadata of this PaymentMethods.  # noqa: E501
        :rtype: PaymentMethodsMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PaymentMethods.


        :param metadata: The metadata of this PaymentMethods.  # noqa: E501
        :type: PaymentMethodsMetadata
        """

        self._metadata = metadata

    @property
    def merchant_name(self):
        """Gets the merchant_name of this PaymentMethods.  # noqa: E501

        The name of the merchant  # noqa: E501

        :return: The merchant_name of this PaymentMethods.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this PaymentMethods.

        The name of the merchant  # noqa: E501

        :param merchant_name: The merchant_name of this PaymentMethods.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_url(self):
        """Gets the merchant_url of this PaymentMethods.  # noqa: E501

        The URL of the merchant's website  # noqa: E501

        :return: The merchant_url of this PaymentMethods.  # noqa: E501
        :rtype: str
        """
        return self._merchant_url

    @merchant_url.setter
    def merchant_url(self, merchant_url):
        """Sets the merchant_url of this PaymentMethods.

        The URL of the merchant's website  # noqa: E501

        :param merchant_url: The merchant_url of this PaymentMethods.  # noqa: E501
        :type: str
        """

        self._merchant_url = merchant_url

    @property
    def country_code(self):
        """Gets the country_code of this PaymentMethods.  # noqa: E501

        Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).  # noqa: E501

        :return: The country_code of this PaymentMethods.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PaymentMethods.

        Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).  # noqa: E501

        :param country_code: The country_code of this PaymentMethods.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def account_id(self):
        """Gets the account_id of this PaymentMethods.  # noqa: E501

        MONEI Account identifier.  # noqa: E501

        :return: The account_id of this PaymentMethods.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PaymentMethods.

        MONEI Account identifier.  # noqa: E501

        :param account_id: The account_id of this PaymentMethods.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this PaymentMethods.  # noqa: E501

        The amount of the payment in the smallest currency unit. For example, 10 EUR = 1000 cents. Only present when querying by paymentId.   # noqa: E501

        :return: The amount of this PaymentMethods.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentMethods.

        The amount of the payment in the smallest currency unit. For example, 10 EUR = 1000 cents. Only present when querying by paymentId.   # noqa: E501

        :param amount: The amount of this PaymentMethods.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this PaymentMethods.  # noqa: E501

        Three-letter ISO currency code, in uppercase. Only present when querying by paymentId.   # noqa: E501

        :return: The currency of this PaymentMethods.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentMethods.

        Three-letter ISO currency code, in uppercase. Only present when querying by paymentId.   # noqa: E501

        :param currency: The currency of this PaymentMethods.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethods):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentMethods):
            return True

        return self.to_dict() != other.to_dict()
