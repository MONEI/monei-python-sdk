# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <p><a href=\"https://docs.monei.com/api/errors\">View complete list of status codes â†’</a></p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p>   # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Monei.configuration import Configuration


class PaymentMethodsMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alipay': 'PaymentMethodsMetadataAlipay',
        'bancontact': 'PaymentMethodsMetadataBancontact',
        'bizum': 'PaymentMethodsMetadataBizum',
        'blik': 'PaymentMethodsMetadataBlik',
        'card': 'PaymentMethodsMetadataCard',
        'eps': 'PaymentMethodsMetadataEps',
        'i_deal': 'PaymentMethodsMetadataIDeal',
        'mbway': 'PaymentMethodsMetadataMbway',
        'multibanco': 'PaymentMethodsMetadataMbway',
        'sofort': 'PaymentMethodsMetadataSofort',
        'trustly': 'PaymentMethodsMetadataTrustly',
        'sepa': 'PaymentMethodsMetadataSepa',
        'klarna': 'PaymentMethodsMetadataKlarna',
        'giropay': 'PaymentMethodsMetadataGiropay',
        'google_pay': 'PaymentMethodsMetadataGooglePay',
        'apple_pay': 'PaymentMethodsMetadataApplePay',
        'click_to_pay': 'PaymentMethodsMetadataClickToPay'
    }

    attribute_map = {
        'alipay': 'alipay',
        'bancontact': 'bancontact',
        'bizum': 'bizum',
        'blik': 'blik',
        'card': 'card',
        'eps': 'eps',
        'i_deal': 'iDeal',
        'mbway': 'mbway',
        'multibanco': 'multibanco',
        'sofort': 'sofort',
        'trustly': 'trustly',
        'sepa': 'sepa',
        'klarna': 'klarna',
        'giropay': 'giropay',
        'google_pay': 'googlePay',
        'apple_pay': 'applePay',
        'click_to_pay': 'clickToPay'
    }

    def __init__(self, alipay=None, bancontact=None, bizum=None, blik=None, card=None, eps=None, i_deal=None, mbway=None, multibanco=None, sofort=None, trustly=None, sepa=None, klarna=None, giropay=None, google_pay=None, apple_pay=None, click_to_pay=None, local_vars_configuration=None):  # noqa: E501
        """PaymentMethodsMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alipay = None
        self._bancontact = None
        self._bizum = None
        self._blik = None
        self._card = None
        self._eps = None
        self._i_deal = None
        self._mbway = None
        self._multibanco = None
        self._sofort = None
        self._trustly = None
        self._sepa = None
        self._klarna = None
        self._giropay = None
        self._google_pay = None
        self._apple_pay = None
        self._click_to_pay = None
        self.discriminator = None

        if alipay is not None:
            self.alipay = alipay
        if bancontact is not None:
            self.bancontact = bancontact
        if bizum is not None:
            self.bizum = bizum
        if blik is not None:
            self.blik = blik
        if card is not None:
            self.card = card
        if eps is not None:
            self.eps = eps
        if i_deal is not None:
            self.i_deal = i_deal
        if mbway is not None:
            self.mbway = mbway
        if multibanco is not None:
            self.multibanco = multibanco
        if sofort is not None:
            self.sofort = sofort
        if trustly is not None:
            self.trustly = trustly
        if sepa is not None:
            self.sepa = sepa
        if klarna is not None:
            self.klarna = klarna
        if giropay is not None:
            self.giropay = giropay
        if google_pay is not None:
            self.google_pay = google_pay
        if apple_pay is not None:
            self.apple_pay = apple_pay
        if click_to_pay is not None:
            self.click_to_pay = click_to_pay

    @property
    def alipay(self):
        """Gets the alipay of this PaymentMethodsMetadata.  # noqa: E501


        :return: The alipay of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataAlipay
        """
        return self._alipay

    @alipay.setter
    def alipay(self, alipay):
        """Sets the alipay of this PaymentMethodsMetadata.


        :param alipay: The alipay of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataAlipay
        """

        self._alipay = alipay

    @property
    def bancontact(self):
        """Gets the bancontact of this PaymentMethodsMetadata.  # noqa: E501


        :return: The bancontact of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataBancontact
        """
        return self._bancontact

    @bancontact.setter
    def bancontact(self, bancontact):
        """Sets the bancontact of this PaymentMethodsMetadata.


        :param bancontact: The bancontact of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataBancontact
        """

        self._bancontact = bancontact

    @property
    def bizum(self):
        """Gets the bizum of this PaymentMethodsMetadata.  # noqa: E501


        :return: The bizum of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataBizum
        """
        return self._bizum

    @bizum.setter
    def bizum(self, bizum):
        """Sets the bizum of this PaymentMethodsMetadata.


        :param bizum: The bizum of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataBizum
        """

        self._bizum = bizum

    @property
    def blik(self):
        """Gets the blik of this PaymentMethodsMetadata.  # noqa: E501


        :return: The blik of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataBlik
        """
        return self._blik

    @blik.setter
    def blik(self, blik):
        """Sets the blik of this PaymentMethodsMetadata.


        :param blik: The blik of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataBlik
        """

        self._blik = blik

    @property
    def card(self):
        """Gets the card of this PaymentMethodsMetadata.  # noqa: E501


        :return: The card of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentMethodsMetadata.


        :param card: The card of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataCard
        """

        self._card = card

    @property
    def eps(self):
        """Gets the eps of this PaymentMethodsMetadata.  # noqa: E501


        :return: The eps of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataEps
        """
        return self._eps

    @eps.setter
    def eps(self, eps):
        """Sets the eps of this PaymentMethodsMetadata.


        :param eps: The eps of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataEps
        """

        self._eps = eps

    @property
    def i_deal(self):
        """Gets the i_deal of this PaymentMethodsMetadata.  # noqa: E501


        :return: The i_deal of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataIDeal
        """
        return self._i_deal

    @i_deal.setter
    def i_deal(self, i_deal):
        """Sets the i_deal of this PaymentMethodsMetadata.


        :param i_deal: The i_deal of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataIDeal
        """

        self._i_deal = i_deal

    @property
    def mbway(self):
        """Gets the mbway of this PaymentMethodsMetadata.  # noqa: E501


        :return: The mbway of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataMbway
        """
        return self._mbway

    @mbway.setter
    def mbway(self, mbway):
        """Sets the mbway of this PaymentMethodsMetadata.


        :param mbway: The mbway of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataMbway
        """

        self._mbway = mbway

    @property
    def multibanco(self):
        """Gets the multibanco of this PaymentMethodsMetadata.  # noqa: E501


        :return: The multibanco of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataMbway
        """
        return self._multibanco

    @multibanco.setter
    def multibanco(self, multibanco):
        """Sets the multibanco of this PaymentMethodsMetadata.


        :param multibanco: The multibanco of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataMbway
        """

        self._multibanco = multibanco

    @property
    def sofort(self):
        """Gets the sofort of this PaymentMethodsMetadata.  # noqa: E501


        :return: The sofort of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataSofort
        """
        return self._sofort

    @sofort.setter
    def sofort(self, sofort):
        """Sets the sofort of this PaymentMethodsMetadata.


        :param sofort: The sofort of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataSofort
        """

        self._sofort = sofort

    @property
    def trustly(self):
        """Gets the trustly of this PaymentMethodsMetadata.  # noqa: E501


        :return: The trustly of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataTrustly
        """
        return self._trustly

    @trustly.setter
    def trustly(self, trustly):
        """Sets the trustly of this PaymentMethodsMetadata.


        :param trustly: The trustly of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataTrustly
        """

        self._trustly = trustly

    @property
    def sepa(self):
        """Gets the sepa of this PaymentMethodsMetadata.  # noqa: E501


        :return: The sepa of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataSepa
        """
        return self._sepa

    @sepa.setter
    def sepa(self, sepa):
        """Sets the sepa of this PaymentMethodsMetadata.


        :param sepa: The sepa of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataSepa
        """

        self._sepa = sepa

    @property
    def klarna(self):
        """Gets the klarna of this PaymentMethodsMetadata.  # noqa: E501


        :return: The klarna of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataKlarna
        """
        return self._klarna

    @klarna.setter
    def klarna(self, klarna):
        """Sets the klarna of this PaymentMethodsMetadata.


        :param klarna: The klarna of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataKlarna
        """

        self._klarna = klarna

    @property
    def giropay(self):
        """Gets the giropay of this PaymentMethodsMetadata.  # noqa: E501


        :return: The giropay of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataGiropay
        """
        return self._giropay

    @giropay.setter
    def giropay(self, giropay):
        """Sets the giropay of this PaymentMethodsMetadata.


        :param giropay: The giropay of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataGiropay
        """

        self._giropay = giropay

    @property
    def google_pay(self):
        """Gets the google_pay of this PaymentMethodsMetadata.  # noqa: E501


        :return: The google_pay of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataGooglePay
        """
        return self._google_pay

    @google_pay.setter
    def google_pay(self, google_pay):
        """Sets the google_pay of this PaymentMethodsMetadata.


        :param google_pay: The google_pay of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataGooglePay
        """

        self._google_pay = google_pay

    @property
    def apple_pay(self):
        """Gets the apple_pay of this PaymentMethodsMetadata.  # noqa: E501


        :return: The apple_pay of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataApplePay
        """
        return self._apple_pay

    @apple_pay.setter
    def apple_pay(self, apple_pay):
        """Sets the apple_pay of this PaymentMethodsMetadata.


        :param apple_pay: The apple_pay of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataApplePay
        """

        self._apple_pay = apple_pay

    @property
    def click_to_pay(self):
        """Gets the click_to_pay of this PaymentMethodsMetadata.  # noqa: E501


        :return: The click_to_pay of this PaymentMethodsMetadata.  # noqa: E501
        :rtype: PaymentMethodsMetadataClickToPay
        """
        return self._click_to_pay

    @click_to_pay.setter
    def click_to_pay(self, click_to_pay):
        """Sets the click_to_pay of this PaymentMethodsMetadata.


        :param click_to_pay: The click_to_pay of this PaymentMethodsMetadata.  # noqa: E501
        :type: PaymentMethodsMetadataClickToPay
        """

        self._click_to_pay = click_to_pay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodsMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentMethodsMetadata):
            return True

        return self.to_dict() != other.to_dict()
