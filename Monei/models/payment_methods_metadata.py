# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from Monei.models.payment_methods_metadata_alipay import PaymentMethodsMetadataAlipay
from Monei.models.payment_methods_metadata_apple_pay import PaymentMethodsMetadataApplePay
from Monei.models.payment_methods_metadata_bancontact import PaymentMethodsMetadataBancontact
from Monei.models.payment_methods_metadata_bizum import PaymentMethodsMetadataBizum
from Monei.models.payment_methods_metadata_blik import PaymentMethodsMetadataBlik
from Monei.models.payment_methods_metadata_card import PaymentMethodsMetadataCard
from Monei.models.payment_methods_metadata_click_to_pay import PaymentMethodsMetadataClickToPay
from Monei.models.payment_methods_metadata_eps import PaymentMethodsMetadataEps
from Monei.models.payment_methods_metadata_giropay import PaymentMethodsMetadataGiropay
from Monei.models.payment_methods_metadata_google_pay import PaymentMethodsMetadataGooglePay
from Monei.models.payment_methods_metadata_i_deal import PaymentMethodsMetadataIDeal
from Monei.models.payment_methods_metadata_klarna import PaymentMethodsMetadataKlarna
from Monei.models.payment_methods_metadata_mbway import PaymentMethodsMetadataMbway
from Monei.models.payment_methods_metadata_sepa import PaymentMethodsMetadataSepa
from Monei.models.payment_methods_metadata_sofort import PaymentMethodsMetadataSofort
from Monei.models.payment_methods_metadata_trustly import PaymentMethodsMetadataTrustly
from typing import Optional, Set
from typing_extensions import Self

class PaymentMethodsMetadata(BaseModel):
    """
    Additional configuration details for each payment method. 
    """ # noqa: E501
    alipay: Optional[PaymentMethodsMetadataAlipay] = None
    bancontact: Optional[PaymentMethodsMetadataBancontact] = None
    bizum: Optional[PaymentMethodsMetadataBizum] = None
    blik: Optional[PaymentMethodsMetadataBlik] = None
    card: Optional[PaymentMethodsMetadataCard] = None
    eps: Optional[PaymentMethodsMetadataEps] = None
    i_deal: Optional[PaymentMethodsMetadataIDeal] = Field(default=None, alias="iDeal")
    mbway: Optional[PaymentMethodsMetadataMbway] = None
    multibanco: Optional[PaymentMethodsMetadataMbway] = None
    sofort: Optional[PaymentMethodsMetadataSofort] = None
    trustly: Optional[PaymentMethodsMetadataTrustly] = None
    sepa: Optional[PaymentMethodsMetadataSepa] = None
    klarna: Optional[PaymentMethodsMetadataKlarna] = None
    giropay: Optional[PaymentMethodsMetadataGiropay] = None
    google_pay: Optional[PaymentMethodsMetadataGooglePay] = Field(default=None, alias="googlePay")
    apple_pay: Optional[PaymentMethodsMetadataApplePay] = Field(default=None, alias="applePay")
    click_to_pay: Optional[PaymentMethodsMetadataClickToPay] = Field(default=None, alias="clickToPay")
    __properties: ClassVar[List[str]] = ["alipay", "bancontact", "bizum", "blik", "card", "eps", "iDeal", "mbway", "multibanco", "sofort", "trustly", "sepa", "klarna", "giropay", "googlePay", "applePay", "clickToPay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentMethodsMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alipay
        if self.alipay:
            _dict['alipay'] = self.alipay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bancontact
        if self.bancontact:
            _dict['bancontact'] = self.bancontact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bizum
        if self.bizum:
            _dict['bizum'] = self.bizum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of blik
        if self.blik:
            _dict['blik'] = self.blik.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eps
        if self.eps:
            _dict['eps'] = self.eps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of i_deal
        if self.i_deal:
            _dict['iDeal'] = self.i_deal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mbway
        if self.mbway:
            _dict['mbway'] = self.mbway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multibanco
        if self.multibanco:
            _dict['multibanco'] = self.multibanco.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sofort
        if self.sofort:
            _dict['sofort'] = self.sofort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trustly
        if self.trustly:
            _dict['trustly'] = self.trustly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sepa
        if self.sepa:
            _dict['sepa'] = self.sepa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of klarna
        if self.klarna:
            _dict['klarna'] = self.klarna.to_dict()
        # override the default output from pydantic by calling `to_dict()` of giropay
        if self.giropay:
            _dict['giropay'] = self.giropay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_pay
        if self.google_pay:
            _dict['googlePay'] = self.google_pay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apple_pay
        if self.apple_pay:
            _dict['applePay'] = self.apple_pay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of click_to_pay
        if self.click_to_pay:
            _dict['clickToPay'] = self.click_to_pay.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentMethodsMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alipay": PaymentMethodsMetadataAlipay.from_dict(obj["alipay"]) if obj.get("alipay") is not None else None,
            "bancontact": PaymentMethodsMetadataBancontact.from_dict(obj["bancontact"]) if obj.get("bancontact") is not None else None,
            "bizum": PaymentMethodsMetadataBizum.from_dict(obj["bizum"]) if obj.get("bizum") is not None else None,
            "blik": PaymentMethodsMetadataBlik.from_dict(obj["blik"]) if obj.get("blik") is not None else None,
            "card": PaymentMethodsMetadataCard.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "eps": PaymentMethodsMetadataEps.from_dict(obj["eps"]) if obj.get("eps") is not None else None,
            "iDeal": PaymentMethodsMetadataIDeal.from_dict(obj["iDeal"]) if obj.get("iDeal") is not None else None,
            "mbway": PaymentMethodsMetadataMbway.from_dict(obj["mbway"]) if obj.get("mbway") is not None else None,
            "multibanco": PaymentMethodsMetadataMbway.from_dict(obj["multibanco"]) if obj.get("multibanco") is not None else None,
            "sofort": PaymentMethodsMetadataSofort.from_dict(obj["sofort"]) if obj.get("sofort") is not None else None,
            "trustly": PaymentMethodsMetadataTrustly.from_dict(obj["trustly"]) if obj.get("trustly") is not None else None,
            "sepa": PaymentMethodsMetadataSepa.from_dict(obj["sepa"]) if obj.get("sepa") is not None else None,
            "klarna": PaymentMethodsMetadataKlarna.from_dict(obj["klarna"]) if obj.get("klarna") is not None else None,
            "giropay": PaymentMethodsMetadataGiropay.from_dict(obj["giropay"]) if obj.get("giropay") is not None else None,
            "googlePay": PaymentMethodsMetadataGooglePay.from_dict(obj["googlePay"]) if obj.get("googlePay") is not None else None,
            "applePay": PaymentMethodsMetadataApplePay.from_dict(obj["applePay"]) if obj.get("applePay") is not None else None,
            "clickToPay": PaymentMethodsMetadataClickToPay.from_dict(obj["clickToPay"]) if obj.get("clickToPay") is not None else None
        })
        return _obj


