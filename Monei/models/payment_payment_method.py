# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from Monei.models.payment_payment_method_bizum import PaymentPaymentMethodBizum
from Monei.models.payment_payment_method_card import PaymentPaymentMethodCard
from Monei.models.payment_payment_method_cofidis import PaymentPaymentMethodCofidis
from Monei.models.payment_payment_method_klarna import PaymentPaymentMethodKlarna
from Monei.models.payment_payment_method_mbway import PaymentPaymentMethodMbway
from Monei.models.payment_payment_method_paypal import PaymentPaymentMethodPaypal
from Monei.models.payment_payment_method_sepa import PaymentPaymentMethodSepa
from Monei.models.payment_payment_method_trustly import PaymentPaymentMethodTrustly
from typing import Optional, Set
from typing_extensions import Self

class PaymentPaymentMethod(BaseModel):
    """
    Details about the payment method at the time of the transaction. 
    """ # noqa: E501
    method: Optional[StrictStr] = Field(default=None, description="Payment method type.")
    card: Optional[PaymentPaymentMethodCard] = None
    bizum: Optional[PaymentPaymentMethodBizum] = None
    paypal: Optional[PaymentPaymentMethodPaypal] = None
    cofidis: Optional[PaymentPaymentMethodCofidis] = None
    cofidis_loan: Optional[PaymentPaymentMethodCofidis] = Field(default=None, alias="cofidisLoan")
    mbway: Optional[PaymentPaymentMethodMbway] = None
    trustly: Optional[PaymentPaymentMethodTrustly] = None
    sepa: Optional[PaymentPaymentMethodSepa] = None
    klarna: Optional[PaymentPaymentMethodKlarna] = None
    __properties: ClassVar[List[str]] = ["method", "card", "bizum", "paypal", "cofidis", "cofidisLoan", "mbway", "trustly", "sepa", "klarna"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['alipay', 'card', 'bizum', 'paypal', 'cofidis', 'cofidisLoan', 'mbway', 'multibanco', 'iDeal', 'bancontact', 'sofort', 'trustly', 'sepa', 'klarna', 'giropay', 'eps', 'blik']):
            raise ValueError("must be one of enum values ('alipay', 'card', 'bizum', 'paypal', 'cofidis', 'cofidisLoan', 'mbway', 'multibanco', 'iDeal', 'bancontact', 'sofort', 'trustly', 'sepa', 'klarna', 'giropay', 'eps', 'blik')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bizum
        if self.bizum:
            _dict['bizum'] = self.bizum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paypal
        if self.paypal:
            _dict['paypal'] = self.paypal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cofidis
        if self.cofidis:
            _dict['cofidis'] = self.cofidis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cofidis_loan
        if self.cofidis_loan:
            _dict['cofidisLoan'] = self.cofidis_loan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mbway
        if self.mbway:
            _dict['mbway'] = self.mbway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trustly
        if self.trustly:
            _dict['trustly'] = self.trustly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sepa
        if self.sepa:
            _dict['sepa'] = self.sepa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of klarna
        if self.klarna:
            _dict['klarna'] = self.klarna.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method": obj.get("method"),
            "card": PaymentPaymentMethodCard.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "bizum": PaymentPaymentMethodBizum.from_dict(obj["bizum"]) if obj.get("bizum") is not None else None,
            "paypal": PaymentPaymentMethodPaypal.from_dict(obj["paypal"]) if obj.get("paypal") is not None else None,
            "cofidis": PaymentPaymentMethodCofidis.from_dict(obj["cofidis"]) if obj.get("cofidis") is not None else None,
            "cofidisLoan": PaymentPaymentMethodCofidis.from_dict(obj["cofidisLoan"]) if obj.get("cofidisLoan") is not None else None,
            "mbway": PaymentPaymentMethodMbway.from_dict(obj["mbway"]) if obj.get("mbway") is not None else None,
            "trustly": PaymentPaymentMethodTrustly.from_dict(obj["trustly"]) if obj.get("trustly") is not None else None,
            "sepa": PaymentPaymentMethodSepa.from_dict(obj["sepa"]) if obj.get("sepa") is not None else None,
            "klarna": PaymentPaymentMethodKlarna.from_dict(obj["klarna"]) if obj.get("klarna") is not None else None
        })
        return _obj


