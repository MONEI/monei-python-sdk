# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentTraceDetails(BaseModel):
    """
    Information related to the browsing session of the user who initiated the payment. 
    """ # noqa: E501
    ip: Optional[StrictStr] = Field(default=None, description="The IP address where the operation originated.")
    country_code: Optional[StrictStr] = Field(default=None, description="Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).", alias="countryCode")
    lang: Optional[StrictStr] = Field(default=None, description="Two-letter language code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)).")
    device_type: Optional[StrictStr] = Field(default=None, description="Device type, could be `desktop`, `mobile`, `smartTV`, `tablet`.", alias="deviceType")
    device_model: Optional[StrictStr] = Field(default=None, description="Information about the device used for the browser session (e.g., `iPhone`).", alias="deviceModel")
    browser: Optional[StrictStr] = Field(default=None, description="The browser used in this browser session (e.g., `Mobile Safari`).")
    browser_version: Optional[StrictStr] = Field(default=None, description="The version for the browser session (e.g., `13.1.1`).", alias="browserVersion")
    os: Optional[StrictStr] = Field(default=None, description="Operation system (e.g., `iOS`).")
    os_version: Optional[StrictStr] = Field(default=None, description="Operation system version (e.g., `13.5.1`).", alias="osVersion")
    source: Optional[StrictStr] = Field(default=None, description="The source component from where the operation was generated (mostly for our SDK's).")
    source_version: Optional[StrictStr] = Field(default=None, description="The source component version from where the operation was generated (mostly for our SDK's).", alias="sourceVersion")
    user_agent: Optional[StrictStr] = Field(default=None, description="Full user agent string of the browser session.", alias="userAgent")
    browser_accept: Optional[StrictStr] = Field(default=None, description="Browser accept header.", alias="browserAccept")
    browser_color_depth: Optional[StrictInt] = Field(default=None, description="The color depth of the browser session (e.g., `24`).", alias="browserColorDepth")
    browser_screen_height: Optional[StrictInt] = Field(default=None, description="The screen height of the browser session (e.g., `1152`).", alias="browserScreenHeight")
    browser_screen_width: Optional[StrictInt] = Field(default=None, description="The screen width of the browser session (e.g., `2048`).", alias="browserScreenWidth")
    browser_timezone_offset: Optional[StrictStr] = Field(default=None, description="The timezone offset of the browser session (e.g., `-120`).", alias="browserTimezoneOffset")
    user_id: Optional[StrictStr] = Field(default=None, description="The ID of the user that started the operation.", alias="userId")
    user_email: Optional[StrictStr] = Field(default=None, description="The email of the user that started the operation.", alias="userEmail")
    __properties: ClassVar[List[str]] = ["ip", "countryCode", "lang", "deviceType", "deviceModel", "browser", "browserVersion", "os", "osVersion", "source", "sourceVersion", "userAgent", "browserAccept", "browserColorDepth", "browserScreenHeight", "browserScreenWidth", "browserTimezoneOffset", "userId", "userEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentTraceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentTraceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ip": obj.get("ip"),
            "countryCode": obj.get("countryCode"),
            "lang": obj.get("lang"),
            "deviceType": obj.get("deviceType"),
            "deviceModel": obj.get("deviceModel"),
            "browser": obj.get("browser"),
            "browserVersion": obj.get("browserVersion"),
            "os": obj.get("os"),
            "osVersion": obj.get("osVersion"),
            "source": obj.get("source"),
            "sourceVersion": obj.get("sourceVersion"),
            "userAgent": obj.get("userAgent"),
            "browserAccept": obj.get("browserAccept"),
            "browserColorDepth": obj.get("browserColorDepth"),
            "browserScreenHeight": obj.get("browserScreenHeight"),
            "browserScreenWidth": obj.get("browserScreenWidth"),
            "browserTimezoneOffset": obj.get("browserTimezoneOffset"),
            "userId": obj.get("userId"),
            "userEmail": obj.get("userEmail")
        })
        return _obj


