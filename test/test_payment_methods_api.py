# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from unittest.mock import patch, MagicMock

from Monei.api.payment_methods_api import PaymentMethodsApi
from Monei.api_client import ApiClient
from Monei.configuration import Configuration
from Monei.exceptions import ApiException


class TestPaymentMethodsApi(unittest.TestCase):
    """PaymentMethodsApi unit test stubs"""

    def setUp(self) -> None:
        configuration = Configuration()
        configuration.api_key = {"Authorization": "test_api_key"}
        self.api_client = ApiClient(configuration)
        self.api = PaymentMethodsApi(self.api_client)

    def tearDown(self) -> None:
        pass

    @patch.object(ApiClient, "call_api")
    def test_get(self, mock_call_api) -> None:
        """Test case for get

        Get Payment Method
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "pm_123",
            "type": "CARD",
            "card": {
                "last4": "4242",
                "brand": "VISA",
                "expiryMonth": 12,
                "expiryYear": 2025
            },
            "customerId": "cus_123",
            "status": "ACTIVE"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        customer_id = "cus_123"
        payment_method_id = "pm_123"
        response = self.api.get(customer_id=customer_id, payment_method_id=payment_method_id)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_list(self, mock_call_api) -> None:
        """Test case for list

        List Payment Methods
        """
        # Configure the mock to return a successful response
        mock_response = {
            "data": [
                {
                    "id": "pm_123",
                    "type": "CARD",
                    "card": {
                        "last4": "4242",
                        "brand": "VISA",
                        "expiryMonth": 12,
                        "expiryYear": 2025
                    },
                    "customerId": "cus_123",
                    "status": "ACTIVE"
                },
                {
                    "id": "pm_456",
                    "type": "CARD",
                    "card": {
                        "last4": "1234",
                        "brand": "MASTERCARD",
                        "expiryMonth": 10,
                        "expiryYear": 2024
                    },
                    "customerId": "cus_123",
                    "status": "ACTIVE"
                }
            ],
            "hasMore": False
        }
        mock_call_api.return_value = mock_response

        # Test the method
        customer_id = "cus_123"
        response = self.api.list(customer_id=customer_id)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_error_handling(self, mock_call_api) -> None:
        """Test error handling in API calls"""
        # Configure the mock to raise an ApiException
        mock_call_api.side_effect = ApiException(
            status=404,
            reason="Not Found",
            body='{"status":"ERROR","statusCode":404,"requestId":"req_123","message":"Payment method not found"}'
        )

        # Test the method
        payment_method_id = "pm_nonexistent"

        # Verify that the exception is raised
        with self.assertRaises(ApiException) as context:
            self.api.get(payment_method_id=payment_method_id)

        # Verify the exception details
        self.assertEqual(context.exception.status, 404)
        self.assertEqual(context.exception.reason, "Not Found")
        self.assertIn("Payment method not found", context.exception.body)


if __name__ == '__main__':
    unittest.main()
