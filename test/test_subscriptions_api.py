# coding: utf-8

"""
    MONEI API v1

    <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p> 

    The version of the OpenAPI document: 1.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from unittest.mock import patch, MagicMock

from Monei.api.subscriptions_api import SubscriptionsApi
from Monei.api_client import ApiClient
from Monei.configuration import Configuration
from Monei.exceptions import ApiException


class TestSubscriptionsApi(unittest.TestCase):
    """SubscriptionsApi unit test stubs"""

    def setUp(self) -> None:
        configuration = Configuration()
        configuration.api_key = {"Authorization": "test_api_key"}
        self.api_client = ApiClient(configuration)
        self.api = SubscriptionsApi(self.api_client)

    def tearDown(self) -> None:
        pass

    @patch.object(ApiClient, "call_api")
    def test_activate(self, mock_call_api) -> None:
        """Test case for activate

        Activate Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "status": "ACTIVE"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        activate_data = {
            "paymentToken": "tok_123",
            "sessionId": "sess_123"
        }
        response = self.api.activate(subscription_id, activate_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_cancel(self, mock_call_api) -> None:
        """Test case for cancel

        Cancel Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "status": "CANCELED",
            "cancelAtPeriodEnd": True
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        cancel_data = {
            "cancelAtPeriodEnd": True
        }
        response = self.api.cancel(subscription_id, cancel_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_create(self, mock_call_api) -> None:
        """Test case for create

        Create Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "status": "ACTIVE",
            "amount": 1000,
            "currency": "EUR",
            "interval": "month",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "startDate": "2023-01-01"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_data = {
            "amount": 1000,
            "currency": "EUR",
            "interval": "month",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "startDate": "2023-01-01"
        }
        response = self.api.create(subscription_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_get(self, mock_call_api) -> None:
        """Test case for get

        Get Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "status": "ACTIVE",
            "amount": 1000,
            "currency": "EUR",
            "interval": "month"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        response = self.api.get(subscription_id)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_pause(self, mock_call_api) -> None:
        """Test case for pause

        Pause Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "status": "PAUSED",
            "resumeAt": "2023-06-01"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        pause_data = {
            "pauseAtPeriodEnd": True,
            "pauseIntervalCount": 1
        }
        response = self.api.pause(subscription_id, pause_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_resume(self, mock_call_api) -> None:
        """Test case for resume

        Resume Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "status": "ACTIVE"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        response = self.api.resume(subscription_id)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_send_link(self, mock_call_api) -> None:
        """Test case for send_link

        Send Subscription Link
        """
        # Configure the mock to return a successful response
        mock_response = {
            "success": True
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        link_data = {
            "customerEmail": "customer@example.com",
            "customerPhone": "+34600000000"
        }
        response = self.api.send_link(subscription_id, link_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_send_status(self, mock_call_api) -> None:
        """Test case for send_status

        Send Subscription Status
        """
        # Configure the mock to return a successful response
        mock_response = {
            "success": True
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        status_data = {
            "customerEmail": "customer@example.com"
        }
        response = self.api.send_status(subscription_id, status_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_update(self, mock_call_api) -> None:
        """Test case for update

        Update Subscription
        """
        # Configure the mock to return a successful response
        mock_response = {
            "id": "sub_123",
            "customerId": "cus_123",
            "paymentMethodId": "pm_123",
            "planId": "plan_123",
            "status": "ACTIVE",
            "amount": 2000,
            "description": "Updated subscription"
        }
        mock_call_api.return_value = mock_response

        # Test the method
        subscription_id = "sub_123"
        update_data = {
            "amount": 2000,
            "description": "Updated subscription"
        }
        response = self.api.update(subscription_id, update_data)

        # Verify the response
        self.assertEqual(response, mock_response)
        mock_call_api.assert_called_once()

    @patch.object(ApiClient, "call_api")
    def test_error_handling(self, mock_call_api) -> None:
        """Test error handling in API calls"""
        # Configure the mock to raise an ApiException
        mock_call_api.side_effect = ApiException(
            status=400,
            reason="Bad Request",
            body='{"status":"ERROR","statusCode":400,"requestId":"req_123","message":"Invalid request"}'
        )

        # Test the method
        subscription_data = {
            "amount": 1000,
            "currency": "EUR",
            "interval": "month",
            "customerId": "cus_123"
        }

        # Verify that the exception is raised
        with self.assertRaises(ApiException) as context:
            self.api.create(subscription_data)

        # Verify the exception details
        self.assertEqual(context.exception.status, 400)
        self.assertEqual(context.exception.reason, "Bad Request")
        self.assertIn("Invalid request", context.exception.body)


if __name__ == '__main__':
    unittest.main()
