import pytest
import os
from unittest.mock import patch, MagicMock
import json
import datetime

# Constants for testing
TEST_API_KEY = "test_api_key"
TEST_ACCOUNT_ID = "acc_123456789"


@pytest.fixture
def api_client():
    """Fixture for creating a mock API client."""
    from Monei.api_client import ApiClient

    # Create a mock API client that doesn't make real API calls
    with patch.object(ApiClient, "call_api", return_value=(None, 0, {})):
        client = ApiClient()
        client.configuration.api_key["apiKey"] = TEST_API_KEY
        yield client


@pytest.fixture
def api_instance(api_client):
    """Fixture for creating API instances with the mock client."""

    def _get_api_instance(api_class):
        return api_class(api_client=api_client)

    return _get_api_instance


@pytest.fixture
def mock_response():
    """Fixture for creating mock API responses."""

    def _create_mock_response(status=200, data=None, headers=None):
        mock_resp = MagicMock()
        mock_resp.status = status
        mock_resp.data = json.dumps(data or {}).encode("utf-8")
        mock_resp.headers = headers or {}
        return mock_resp

    return _create_mock_response


# Helper to convert datetime objects to strings in JSON serialization
def json_serial(obj):
    if isinstance(obj, (datetime.datetime, datetime.date)):
        return obj.isoformat()
    raise TypeError(f"Type {type(obj)} not serializable")


# Skip tests that require real API calls in CI environments
def pytest_configure(config):
    """Configure pytest markers."""
    config.addinivalue_line(
        "markers", "generated: mark test as auto-generated by OpenAPI Generator"
    )
    config.addinivalue_line("markers", "requires_api: mark test as requiring real API access")


def pytest_collection_modifyitems(config, items):
    """Skip auto-generated tests that make real API calls unless explicitly enabled."""
    skip_generated = pytest.mark.skip(reason="Auto-generated test that makes real API calls")

    # Check if we're running in CI or if SKIP_GENERATED_TESTS is set
    if os.environ.get("CI") or os.environ.get("SKIP_GENERATED_TESTS"):
        for item in items:
            if "test_" in item.name and not item.get_closest_marker("requires_api"):
                # Mark all auto-generated tests with the 'generated' marker
                item.add_marker(pytest.mark.generated)

                # Skip tests that would make real API calls
                if not any(marker.name == "requires_api" for marker in item.iter_markers()):
                    item.add_marker(skip_generated)
